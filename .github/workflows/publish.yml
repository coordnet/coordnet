name: Publish Docker images

on:
#  push:
#    branches: ["main", "ci-docker-build"]
  release:
    types: [ published ]
  schedule:
    - cron: "0 0 * * *" # every day at midnight
env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: coordnet/coordnet_backend
  CRDT_IMAGE_NAME: coordnet/coordnet_crdt

jobs:
  build-backend:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # network=host driver-opt needed to push to local registry
          driver-opts: network=host

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            # Set nightly tag for scheduled builds
            type=schedule,pattern=nightly
            # Use calver for tags
            type=match,pattern=v(.*),group=1
            # Use latest tag for releases
            type=raw,value=latest,enable=${{startsWith(github.ref, 'refs/tags/releases/')}}
            # For testing
            #type=raw,value=test,enable=true

      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          load: true
          context: .
          file: ./compose/frontend/Dockerfile
          tags: localhost:5000/coordnet_local_frontend:latest
          cache-from: type=gha,scope=frontend-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=frontend-${{ matrix.platform }}
          platforms: ${{ matrix.platform }}
          build-args: |
              BUILD_ENVIRONMENT = "production"
              VITE_CRDT_URL = "wss://ws.coord.dev"
              VITE_BACKEND_WS_URL = "wss://app.coord.dev"
              VITE_BACKEND_URL = "https://app.coord.dev"
              BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
              VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
              REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
              BUILD_ENVIRONMENT=production

      - name: Push frontend image to local registry
        run: docker push localhost:5000/coordnet_local_frontend:latest

      - name: Build and push backend image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./compose/django/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=backend-${{ matrix.platform }}
          platforms: ${{ matrix.platform }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            BUILD_ENVIRONMENT=production
            FRONTEND_IMAGE=localhost:5000/coordnet_local_frontend:latest
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-backend-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-backend:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs:
      - build-backend
      - sync
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-backend-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            # Set nightly tag for scheduled builds
            type=schedule,pattern=nightly
            # Use calver for tags
            type=match,pattern=v(.*),group=1
            # Use latest tag for releases
            type=raw,value=latest,enable=${{startsWith(github.ref, 'refs/tags/releases/')}}
            # For testing
            #type=raw,value=test,enable=true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  build-crdt:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # network=host driver-opt needed to push to local registry
          driver-opts: network=host

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CRDT_IMAGE_NAME }}
          tags: |
            # Set nightly tag for scheduled builds
            type=schedule,pattern=nightly
            # Use calver for tags
            type=match,pattern=v(.*),group=1
            # Use latest tag for releases
            type=raw,value=latest,enable=${{startsWith(github.ref, 'refs/tags/releases/')}}
            # For testing
            #type=raw,value=test,enable=true

      - name: Build and push CRDT image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./compose/crdt/Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=crdt-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=crdt-${{ matrix.platform }}
          platforms: ${{ matrix.platform }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.CRDT_IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-crdt-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-crdt:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    runs-on: ubuntu-latest
    needs:
      - build-crdt
      - sync
    steps:
      - name: Download digests
        uses: actions/download-artifact@v5
        with:
          path: /tmp/digests
          pattern: digests-crdt-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.CRDT_IMAGE_NAME }}
          tags: |
            # Set nightly tag for scheduled builds
            type=schedule,pattern=nightly
            # Use calver for tags
            type=match,pattern=v(.*),group=1
            # Use latest tag for releases
            type=raw,value=latest,enable=${{startsWith(github.ref, 'refs/tags/releases/')}}
            # For testing
            #type=raw,value=test,enable=true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.CRDT_IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.CRDT_IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  sync:
    runs-on: ubuntu-latest
    needs:
      - build-backend
      - build-crdt
    steps:
      - name: Sync up the publish steps.
        run: echo "Synced up the publish steps."
